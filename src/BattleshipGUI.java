
import java.awt.Color;
import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Drew Jenney
 */
public class BattleshipGUI extends javax.swing.JPanel {

    //arrays of this player attacks for testing
        //int[][] board = new int[10][10];
    
    //the game this gui represents
        BattleshipBoard board;
    
    /**
     * Creates new form BattleshipGUI
     */
    public BattleshipGUI() {
        initComponents();
        setRenderer();
        
        JFrame frame = new JFrame();
        frame.setContentPane(this);
        frame.pack();
        frame.setVisible(true);
    }
    
    public BattleshipGUI(BattleshipBoard board) {
        this.board = board;
        initComponents();
        setRenderer();
    }
    
    /**
     * Sets table renderer to render cells of table as different colors
     * depending upon the value
     * of the corresponding element of a BattleshipBoard board int[][]
     */
    private void setRenderer() {
        JTable[] tables = {opponentBoard, playerBoard};
        
        for(JTable table : tables) {
            table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {

                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);    

                    Color cellColor = Color.LIGHT_GRAY;
                        if(row >= 0 && row < 10 && column > 0 && column < 11) { 
                            switch(board.board[row][column-1]) {
                                case 1: cellColor = Color.DARK_GRAY;
                                    break;
                                case 2: cellColor = Color.GREEN;
                                    break;
                                case 3: cellColor = Color.RED;
                                    break;
                                default: cellColor = Color.WHITE;
                                    break;      
                            }
                        }
                    c.setBackground(cellColor);
                    return c; 
                        }
                    });
        }
    }
    
    /*
    public static void main(String args[]) {
        JFrame frame = new JFrame();
        BattleshipGUI panel = new BattleshipGUI();
        
        frame.setContentPane(panel);
        frame.pack();
        frame.setVisible(true);
    }
    */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        playerBoard = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        opponentBoard = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        playerBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", null, null, null, null, null, null, null, null, null, null},
                {"B", null, null, null, null, null, null, null, null, null, null},
                {"C", null, null, null, null, null, null, null, null, null, null},
                {"D", null, null, null, null, null, null, null, null, null, null},
                {"E", null, null, null, null, null, null, null, null, null, null},
                {"F", null, null, null, null, null, null, null, null, null, null},
                {"G", null, null, null, null, null, null, null, null, null, null},
                {"H", null, null, null, null, null, null, null, null, null, null},
                {"I", null, null, null, null, null, null, null, null, null, null},
                {"J", null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        playerBoard.setGridColor(new java.awt.Color(0, 51, 204));
        playerBoard.setRowHeight(30);
        playerBoard.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(playerBoard);
        if (playerBoard.getColumnModel().getColumnCount() > 0) {
            playerBoard.getColumnModel().getColumn(0).setResizable(false);
            playerBoard.getColumnModel().getColumn(0).setPreferredWidth(15);
            playerBoard.getColumnModel().getColumn(1).setResizable(false);
            playerBoard.getColumnModel().getColumn(1).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(2).setResizable(false);
            playerBoard.getColumnModel().getColumn(2).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(3).setResizable(false);
            playerBoard.getColumnModel().getColumn(3).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(4).setResizable(false);
            playerBoard.getColumnModel().getColumn(4).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(5).setResizable(false);
            playerBoard.getColumnModel().getColumn(5).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(6).setResizable(false);
            playerBoard.getColumnModel().getColumn(6).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(7).setResizable(false);
            playerBoard.getColumnModel().getColumn(7).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(8).setResizable(false);
            playerBoard.getColumnModel().getColumn(8).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(9).setResizable(false);
            playerBoard.getColumnModel().getColumn(9).setPreferredWidth(25);
            playerBoard.getColumnModel().getColumn(10).setResizable(false);
            playerBoard.getColumnModel().getColumn(10).setPreferredWidth(25);
        }

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel1.setText("Your Board");

        opponentBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"A", null, null, null, null, null, null, null, null, null, null},
                {"B", null, null, null, null, null, null, null, null, null, null},
                {"C", null, null, null, null, null, null, null, null, null, null},
                {"D", null, null, null, null, null, null, null, null, null, null},
                {"E", null, null, null, null, null, null, null, null, null, null},
                {"F", null, null, null, null, null, null, null, null, null, null},
                {"G", null, null, null, null, null, null, null, null, null, null},
                {"H", null, null, null, null, null, null, null, null, null, null},
                {"I", null, null, null, null, null, null, null, null, null, null},
                {"J", null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        opponentBoard.setGridColor(new java.awt.Color(255, 51, 51));
        opponentBoard.setRowHeight(30);
        opponentBoard.getTableHeader().setReorderingAllowed(false);
        opponentBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                opponentBoardMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(opponentBoard);
        if (opponentBoard.getColumnModel().getColumnCount() > 0) {
            opponentBoard.getColumnModel().getColumn(0).setResizable(false);
            opponentBoard.getColumnModel().getColumn(0).setPreferredWidth(15);
            opponentBoard.getColumnModel().getColumn(1).setResizable(false);
            opponentBoard.getColumnModel().getColumn(1).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(2).setResizable(false);
            opponentBoard.getColumnModel().getColumn(2).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(3).setResizable(false);
            opponentBoard.getColumnModel().getColumn(3).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(4).setResizable(false);
            opponentBoard.getColumnModel().getColumn(4).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(5).setResizable(false);
            opponentBoard.getColumnModel().getColumn(5).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(6).setResizable(false);
            opponentBoard.getColumnModel().getColumn(6).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(7).setResizable(false);
            opponentBoard.getColumnModel().getColumn(7).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(8).setResizable(false);
            opponentBoard.getColumnModel().getColumn(8).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(9).setResizable(false);
            opponentBoard.getColumnModel().getColumn(9).setPreferredWidth(25);
            opponentBoard.getColumnModel().getColumn(10).setResizable(false);
            opponentBoard.getColumnModel().getColumn(10).setPreferredWidth(25);
        }

        jLabel2.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel2.setText("Opponent's Board");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void opponentBoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opponentBoardMouseClicked
        /* adds 2 (two) to the value of the corresponding board int[][] element
         * (making an empty square a miss, and an occupied square a hit) if the 
         * cell has not already been clicked (meaning no double-guessing)
         */
        if(evt.getSource().equals(opponentBoard)) {
            int row = opponentBoard.rowAtPoint(evt.getPoint());
            int col = opponentBoard.columnAtPoint(evt.getPoint()) - 1;

            if(row > 0 && row <= 10 && col > 0 && col <= 11) {
                //System.out.println(new Point(row, col));
 //------------------>send out guess to server <----------------------
                //check guess VVVVVVV
                if(board.board[row][col] < 2 ) {
                    board.board[row][col] += 2;
                }
                opponentBoard.repaint();
            }
        }
    }//GEN-LAST:event_opponentBoardMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable opponentBoard;
    private javax.swing.JTable playerBoard;
    // End of variables declaration//GEN-END:variables
}
